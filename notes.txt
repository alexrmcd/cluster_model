------------- Notes for Coding---------------
5-25-16
Building lookup table for Greens, seems to be working well, ~2 min for n_r = 500, n_rdv = 1000; 
	gives diff at r=200 rdv=25 of 0.00078, so about rel-err of 1e-4.
running n_rdv at 10000, taking considerably slower, but will see. certainly should be worth implementing at least as a trial, will have to test accuracy of greens function for diff profiles.

** for n_r = 500 n_rdv =10000, no diff in diff, testing with higher n_r

**
nevermind, possible mistake importing to xmgrace, retry these values for n_r = 1000 n_rdv = 10000, no diff really, best to just go with n_r = 500 and n_rdv = 1000 
reran-- no diff, stick with (500, 1000)


note that bringing n_r inside the int casting does not work, gives messed up text file.

-->consider making n_r = rh(kpc), must cast rh as int.could double this as well




5-24-16

DMcalcLUT1 running well, as well as vlookup.
need fairly decent epsrel for the v integral, ~1e5 should work, if you run into problems just up this, doesnt have huge effect on overall time ~2s per mass. could throw a wrench in the greens plans, but at least greens wont throw an error.

also, make sure scale is set as mx/n_LUT. problm in the last one.

ran alpha = 3/2 overnight, total time ~3.5 hrs (12000s)






--------------
IC code should be runnning well, took about 6-7 minutes to run with no SD, didnt come out well, tweak output to give nu*Snu in erg cm^-2s^-1
as well as log(nu) to match Colafranceso.






5-21-16
LUTEXACT stopped last night, fixed things with lookup table, just ran:

DMcalcLUT1 Full exact --> 16400 s
technically 5-21-16
	THink I have the LUT working. LUT gives correct values, issue of implementation. will see tomorrow plotting express,NSD, MAX, and express full, 
	worthwhile to note that full is slower by ~2, but without LUT would be slower by ~20s so not bad, consider switch?

LUTZOOM.jpg , LUTZMax.jpg compare LUTX_MAX w/ NSD and MAX, LUTZEXACT running... forget names of actual txtx files, should be apparent. 


todo 5-20-16
	run dmcalctest2 with alpha = 1/3 to check accuracy of current operation(ie low precision Scd integral)
	compare dndeeq max with exact
	write Pic code
	--lookup table for dv,
	latex
	ln dnde vs E maybe, not much a priority

5-19-16 
removed dsinit.o and dshayield.o from pwd, incase theres issuesmight want them back, seems just linking libraries works? could be an issue with compiling later.

3 alpha values --> 13600 s

future --> calc dndeeq(max dv)/ dndeeq(actual)

5-17-16
time for test2 67788.6


DMcalcAnnulus.cpp
	Coma_bbAnnulus.txt n=75
	Coma_bbAnnulus2.txt n=20 not done

DMcalctest2.cpp switched to epsrel = 1e-1 in greens and dndeeq ints
	Coma_bbTest.txt -> Coma_bbAVEeps1.txt n = 50 ~8300s
	use exact rootdv causes each data point to be ~800 -> 900 s
for epsrel 1e-1, t(mx=5) <2 s,but with epsrel=1e-2, lookin at more like 2-3s.
(note epsrel changed in v(), gslInt_greens, gslInt_diffusion)


epsrel = 1e-1 --> 8300s
epsrel = 1e-2 --> 14500s (mx = 1000 -> 470s)



//////// radioCalc.cpp ////////



L (~74) psynIntegrate()
		
		bfield 
		nu 
		pass z?
		pass E? (for testing, needs to be ~10-100) ------- pass E in diffusionEq.cpp
L(~120) psyn()
		
		dndeeq ----
		sin(degrees or rad?)




//////// DMcalcDV.cpp ////////

incorporate  root_dv()


//////// diffusionEq.cpp ////////






make function that presets cluster basedon string name


bring DM_profile const into cluster def?


for ds, pass mx as *(double*) params

still need to make values accessible to other functions, get(val)?

make integration for other functions, 
	gslInt_dist(), 
	gslInt_ssyn()
	gslInt_greens()
	gslInt_jsyn()
	gslInt_psyn() ---- this is a pain, having 3 parameters, perhaps best left with simpsons?? 



cluster
set_dsparams(mx, ch, yieldk, istat, etc...)



integrate(double E, void * params ){
	set_dsparams(E)
}



DS CHannel 13 only working for mx >= 75.4445 NOTE something goes wrong here for several channels(13,17?) so I dropped the epsrel down to 1e-3, seems to work, matches Emmaf






default vals 4-17-16 ---- ns = 100, Coma rh = 0.415 , rdv in kpc

define a funtion : save a few instances of redefining dist_z, bloss, psynintegrand  still use z

double 	func dist_z(){
			double z = !!!!;
			double dist_z  = Dist()/(1+z);
			return dist_z;
		}


Greens(r, rdv, ns) ---- dont need rdv as a parameter


ns-----probably be removed a s a parameter altogether using GSL


look into pulling rho(r) out of greens, using it only in ssynintegrand ?? might be more work than its worth though....










THink main problem is error in integration, work with gsl library? time is likey an issue, very rudimentary test show them on par but with gsl slightly longer, at 1000 steps

parameters to pass, z, rh (or store with z somehow?), root_dv for testing various values. 

May be good idea to take 0 -> 1e-16 for all integration, for consisiitency

header file for constants


function for root_dv

L(~76) U()
		pass r



L(~250) ssynIntegrand()
	
		z declared in function, best as param? 




Completed:

4-20-16
	MAIN OBJ --- figure out way to pass one parameter (E) into dshayield. ie, function that takes in all params, (mwimp, ch, yieldk, etc), wrap it in function that only takes E, 